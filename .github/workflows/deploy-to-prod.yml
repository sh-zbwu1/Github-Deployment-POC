name: Deploy To Prod
run-name: Deploy To Prod - ${{ inputs.GIT_TAG }}
on:
  workflow_dispatch:
    inputs:
      GIT_TAG:
        required: true
        description: 'Tag to create on'

permissions:
  contents: write
  pull-requests: write
  packages: write   
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      shell: bash
      run: rm -rf ${{ github.workspace }}/*

    - name: Checkout
      uses: actions/checkout@v4.1.0
      with:  
        fetch-depth: 0 # this fetch depth 0 is required to "fetch all history for all branches and tags"
    
    - name: Check that a pull request was made
      shell: bash
      run: |- 
        gh pr list --search "base:deployment-branch-${{ inputs.GIT_TAG }}" --state merged --json number > pr_list.json
        
        pr_id=$(jq '[.[] | .number][0]' pr_list.json | tr -d \")
        if [[ "$pr_id" == "" ]]
        then
            echo "::error::foobar" && exit 1
        fi
        
        gh pr view $pr_id --json headRefOid > head.json
        headRefOid=$(jq '.headRefOid' head.json | tr -d \")
        if [[ "$headRefOid" == "" ]]
        then
            echo "::error::foobar" && exit 1
        fi

        gh pr view $pr_id --json baseRefOid > base.json
        baseRefOid=$(jq '.baseRefOid' base.json | tr -d \")
        if [[ "$baseRefOid" == "" ]]
        then
            echo "::error::foobar" && exit 1
        fi

        most_recent_ancestor=$(git merge-base main ${{ inputs.GIT_TAG }})
        if [[ "$baseRefOid" != "$most_recent_ancestor" ]]
        then
            echo "::error::foobar" && exit 1
        fi

        gh pr view $pr_id --json reviews > reviews.json
        jq '.reviews | .[] | select(.state=="APPROVED") | .author | .login' reviews.json | tr -d \" > reviewers.txt

        gh pr view $pr_id --json commits > commits.json
        last_commit_author=$(jq '.commits | .[0] | .authors | .[0] | .login' commits.json | tr -d \")
        
        reviewer_not_last_commiter=$(cat reviewers.txt | grep -v $last_commit_author)
        
        if [[ "$reviewer_not_last_commiter" == "" ]]
        then
            echo "::error::foobar" && exit 1
        fi

      env:
        GH_TOKEN: ${{ github.token }}